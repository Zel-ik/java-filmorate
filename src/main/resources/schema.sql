CREATE TABLE IF NOT EXISTS user_list(
                          id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                          email VARCHAR(20) NOT NULL,
                          login VARCHAR(20) NOT NULL,
                          name VARCHAR(20),
                          birthday DATE
);

CREATE table IF NOT EXISTS mpa (
                     mpa_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                     mpa_name varchar (10) NOT NULL
);

CREATE TABLE IF NOT EXISTS film_list(
                          film_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                          name VARCHAR(20),
                          description VARCHAR(200),
                          release_date Date,
                          duration INTEGER,
                          rate INTEGER,
                          mpa_id INTEGER REFERENCES mpa (mpa_id)
);

CREATE TABLE IF NOT EXISTS liked_film(
                           liked_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                           film_id INTEGER NOT NULL,
                           user_id INTEGER NOT NULL,
                           FOREIGN KEY (film_id) REFERENCES film_list(film_id),
                           FOREIGN KEY (user_id) REFERENCES user_list(id)

);

CREATE TABLE IF NOT EXISTS friend_status(
                              status_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY ,
                              user_id INTEGER NOT NULL,
                              friend_id INTEGER NOT NULL,
                              friendship_status boolean DEFAULT false NOT NULL,
                              FOREIGN KEY (user_id) REFERENCES user_list(id),
                              FOREIGN KEY (friend_id) REFERENCES user_list(id)
);



CREATE table IF NOT EXISTS genre (
                    genre_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                    genre_name varchar (20) NOT NULL
);

CREATE TABLE IF NOT EXISTS film_genre(
                           genre_id INTEGER REFERENCES genre (genre_id),
                           film_id INTEGER REFERENCES film_list (film_id),
                           CONSTRAINT pk_film_genre PRIMARY KEY (film_id, genre_id)
);

